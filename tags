!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFSIZE	ConsumerTask.cpp	14;"	d	file:
CONSUMERTASK__H	ConsumerTask.h	2;"	d
CheckClient	KeepAlive.cpp	/^int CheckClient(string ip, int port)$/;"	f
ConsumeItem	ConsumerTask.cpp	/^uint8_t *ConsumeItem(ItemRepository *ir, uint8_t* data,uint16_t *data_len)$/;"	f
ConsumerTask	ConsumerTask.cpp	/^void ConsumerTask()$/;"	f
InitItemRepository	ConsumerTask.cpp	/^void InitItemRepository(ItemRepository *ir)$/;"	f
ItemRepository	ConsumerTask.cpp	/^typedef  struct ItemRepository {$/;"	s	file:
ItemRepository	ConsumerTask.cpp	/^}ItemRepository;$/;"	t	typeref:struct:ItemRepository	file:
KEEPALIVE	KeepAlive.cpp	16;"	d	file:
KeepAlive	KeepAlive.cpp	/^int KeepAlive()$/;"	f
Node	KeepAlive.cpp	/^typedef struct Node$/;"	s	file:
Node	KeepAlive.cpp	/^}Node;$/;"	t	typeref:struct:Node	file:
ProduceItem	ConsumerTask.cpp	/^void ProduceItem(const uint8_t* item, const uint16_t len)$/;"	f
RecvSnmp	RecvSnmp.cpp	/^int RecvSnmp(int  trap_port = 162)$/;"	f
RecvUdp	KeepAlive.cpp	/^int RecvUdp()$/;"	f
SEGMENT	Client.cpp	/^typedef struct SEGMENT$/;"	s	file:
SEGMENT	Client.cpp	/^}SEGMENT;$/;"	t	typeref:struct:SEGMENT	file:
SEGMENT	Decomp.cpp	/^typedef struct SEGMENT$/;"	s	file:
SEGMENT	Decomp.cpp	/^}SEGMENT;$/;"	t	typeref:struct:SEGMENT	file:
SHAKE	Client.cpp	/^typedef struct SHAKE$/;"	s	file:
SHAKE	Client.cpp	/^}SHAKE;$/;"	t	typeref:struct:SHAKE	file:
SHAKE	Decomp.cpp	/^typedef struct SHAKE$/;"	s	file:
SHAKE	Decomp.cpp	/^}SHAKE;$/;"	t	typeref:struct:SHAKE	file:
SHAKE_JSON_STR	Decomp.cpp	11;"	d	file:
ST_CONF	Conf.cpp	/^typedef struct ST_CONF$/;"	s	file:
ST_CONF	Conf.cpp	/^}ST_CONF;$/;"	t	typeref:struct:ST_CONF	file:
TT	Client.cpp	/^typedef struct TT{$/;"	s	file:
TT	Client.cpp	/^}TT;$/;"	t	typeref:struct:TT	file:
TT	Decomp.cpp	/^typedef struct TT{$/;"	s	file:
TT	Decomp.cpp	/^}TT;$/;"	t	typeref:struct:TT	file:
WARING	KeepAlive.cpp	15;"	d	file:
WAR_JSON_STR	Decomp.cpp	10;"	d	file:
_KEEPALIVE_H	KeepAlive.h	2;"	d
__CONF__H	Conf.h	2;"	d
__DECOMP__H__	Decomp.h	2;"	d
__RECVSNMP__H	RecvSnmp.h	2;"	d
__STORE__H	Store.h	2;"	d
bug	Client.cpp	/^    uint16_t   bug;$/;"	m	struct:SEGMENT	file:
bug	Decomp.cpp	/^    uint16_t   bug;$/;"	m	struct:SEGMENT	file:
callback	RecvSnmp.cpp	/^void callback( int reason, Snmp *snmp, Pdu &pdu, SnmpTarget &target, void *cd)$/;"	f
check	Client.cpp	/^    uint16_t  check;$/;"	m	struct:SEGMENT	file:
check	Decomp.cpp	/^    uint16_t  check;$/;"	m	struct:SEGMENT	file:
check_pack	KeepAlive.cpp	/^int check_pack(uint8_t *str, uint16_t iLen)$/;"	f
clist	KeepAlive.cpp	/^list<Node> clist;$/;"	v
comp_dir	Conf.cpp	/^int comp_dir(const string dir)$/;"	f
comp_keepalive	Conf.cpp	/^int comp_keepalive(const int keepalive)$/;"	f
comp_sport	Conf.cpp	/^int comp_sport(const int sport)$/;"	f
comp_webip	Conf.cpp	/^int comp_webip(const string ip)$/;"	f
comp_webport	Conf.cpp	/^int comp_webport(const int webport)$/;"	f
conffile	Conf.cpp	/^static  ST_CONF  conffile;$/;"	v	file:
consum	Client.cpp	/^void  consum()$/;"	f
consumed_item_counter	ConsumerTask.cpp	/^	size_t consumed_item_counter;$/;"	m	struct:ItemRepository	file:
consumed_item_counter_mtx	ConsumerTask.cpp	/^	mutex consumed_item_counter_mtx;$/;"	m	struct:ItemRepository	file:
create_sock	KeepAlive.cpp	/^int  create_sock()$/;"	f
day	Client.cpp	/^    uint8_t   day;$/;"	m	struct:TT	file:
day	Decomp.cpp	/^    uint8_t   day;$/;"	m	struct:TT	file:
decomp	Decomp.cpp	/^int  decomp(const uint8_t *input, const uint16_t inlen, uint8_t *output, uint16_t *outlen)$/;"	f
dir	Conf.cpp	/^    string dir;$/;"	m	struct:ST_CONF	file:
eng	Client.cpp	/^    uint8_t   eng;$/;"	m	struct:SEGMENT	file:
eng	Decomp.cpp	/^    uint8_t   eng;$/;"	m	struct:SEGMENT	file:
flag	KeepAlive.cpp	/^    int  flag;$/;"	m	struct:Node	file:
flen	Client.cpp	/^    uint8_t   flen;$/;"	m	struct:SEGMENT	file:
flen	Decomp.cpp	/^    uint8_t   flen;$/;"	m	struct:SEGMENT	file:
fnum	Client.cpp	/^    uint16_t  fnum;$/;"	m	struct:SEGMENT	file:
fnum	Decomp.cpp	/^    uint16_t  fnum;$/;"	m	struct:SEGMENT	file:
gItemRepository	ConsumerTask.cpp	/^static  ItemRepository  gItemRepository;$/;"	v	file:
get_dir	Conf.cpp	/^int get_dir(string dir)$/;"	f
get_keepalive	Conf.cpp	/^int get_keepalive()$/;"	f
get_sport	Conf.cpp	/^int get_sport()$/;"	f
get_webip	Conf.cpp	/^int get_webip(string ip)$/;"	f
get_webport	Conf.cpp	/^int get_webport()$/;"	f
hh	Client.cpp	/^    uint8_t   hh;$/;"	m	struct:TT	file:
hh	Decomp.cpp	/^    uint8_t   hh;$/;"	m	struct:TT	file:
init_client	KeepAlive.cpp	/^int  init_client(int num)$/;"	f
init_conf	Conf.cpp	/^int init_conf(int keepalive = 5, int sport = 5, string webip = "127.0.0.1", int webport = 100, string dir = "\/tmp\/store")$/;"	f
ip	KeepAlive.cpp	/^    string  ip;$/;"	m	struct:Node	file:
item_buffer	ConsumerTask.cpp	/^	char   item_buffer[kItemRepositorySize][BUFFSIZE];$/;"	m	struct:ItemRepository	file:
item_len	ConsumerTask.cpp	/^	uint16_t item_len[kItemRepositorySize];$/;"	m	struct:ItemRepository	file:
kItemRepositorySize	ConsumerTask.cpp	13;"	d	file:
keepalive	Conf.cpp	/^    int  keepalive;$/;"	m	struct:ST_CONF	file:
len	Client.cpp	/^    uint8_t   len;$/;"	m	struct:SHAKE	file:
len	Decomp.cpp	/^    uint8_t   len;$/;"	m	struct:SHAKE	file:
lock	Conf.cpp	/^    pthread_rwlock_t  lock;$/;"	m	struct:ST_CONF	file:
lock	KeepAlive.cpp	/^static pthread_rwlock_t lock;$/;"	v	file:
main	Client.cpp	/^int main()$/;"	f
main	Decomp.cpp	/^int main(int argc, char ** argv)$/;"	f
main	Main.cpp	/^int main(int argc, char **argv)$/;"	f
main	Store.cpp	/^int main(int argc, char** argv)$/;"	f
mm	Client.cpp	/^    uint8_t   mm;$/;"	m	struct:TT	file:
mm	Decomp.cpp	/^    uint8_t   mm;$/;"	m	struct:TT	file:
mon	Client.cpp	/^    uint8_t   mon;$/;"	m	struct:TT	file:
mon	Decomp.cpp	/^    uint8_t   mon;$/;"	m	struct:TT	file:
mtx	ConsumerTask.cpp	/^	mutex mtx;$/;"	m	struct:ItemRepository	file:
node	Client.cpp	/^    uint8_t   node;$/;"	m	struct:SEGMENT	file:
node	Decomp.cpp	/^    uint8_t   node;$/;"	m	struct:SEGMENT	file:
port	KeepAlive.cpp	/^    int  port;$/;"	m	struct:Node	file:
produce	Client.cpp	/^void produce()$/;"	f
produced_item_counter	ConsumerTask.cpp	/^	size_t produced_item_counter;$/;"	m	struct:ItemRepository	file:
produced_item_counter_mtx	ConsumerTask.cpp	/^	mutex produced_item_counter_mtx;$/;"	m	struct:ItemRepository	file:
que	Client.cpp	/^static  queue<uint8_t*> que;$/;"	v	file:
read_position	ConsumerTask.cpp	/^	size_t read_position;$/;"	m	struct:ItemRepository	file:
reload_conf	Conf.cpp	/^int reload_conf(int keepalive = 5, int sport = 5, string webip = "127.0.0.1", int webport = 100, string dir = "\/tmp\/store")$/;"	f
repo_not_empty	ConsumerTask.cpp	/^	condition_variable repo_not_empty;$/;"	m	struct:ItemRepository	file:
repo_not_full	ConsumerTask.cpp	/^	condition_variable repo_not_full;$/;"	m	struct:ItemRepository	file:
res1	Client.cpp	/^    uint16_t  res1;$/;"	m	struct:SEGMENT	file:
res1	Decomp.cpp	/^    uint16_t  res1;$/;"	m	struct:SEGMENT	file:
res2	Client.cpp	/^    uint16_t  res2;$/;"	m	struct:SEGMENT	file:
res2	Decomp.cpp	/^    uint16_t  res2;$/;"	m	struct:SEGMENT	file:
res3	Client.cpp	/^    uint16_t  res3;$/;"	m	struct:SEGMENT	file:
res3	Decomp.cpp	/^    uint16_t  res3;$/;"	m	struct:SEGMENT	file:
rport	Client.cpp	/^static  const int rport=18887;$/;"	v	file:
set_dir	Conf.cpp	/^int set_dir(const string dir)$/;"	f
set_keepalive	Conf.cpp	/^int set_keepalive(const int keepalive)$/;"	f
set_sport	Conf.cpp	/^int set_sport(const int sport)$/;"	f
set_webip	Conf.cpp	/^int set_webip(const string ip)$/;"	f
set_webport	Conf.cpp	/^int set_webport(const int webport)$/;"	f
sin	KeepAlive.cpp	/^    struct  sockaddr_in  sin;$/;"	m	struct:Node	typeref:struct:Node::sockaddr_in	file:
sockfd	KeepAlive.cpp	/^static int  sockfd = 0;$/;"	v	file:
son_sys	Client.cpp	/^    uint8_t   son_sys;$/;"	m	struct:SEGMENT	file:
son_sys	Client.cpp	/^    uint8_t   son_sys;$/;"	m	struct:SHAKE	file:
son_sys	Decomp.cpp	/^    uint8_t   son_sys;$/;"	m	struct:SEGMENT	file:
son_sys	Decomp.cpp	/^    uint8_t   son_sys;$/;"	m	struct:SHAKE	file:
sport	Client.cpp	/^static  const int sport=18888;$/;"	v	file:
sport	Conf.cpp	/^    int  sport;$/;"	m	struct:ST_CONF	file:
ss	Client.cpp	/^    uint8_t   ss;$/;"	m	struct:TT	file:
ss	Decomp.cpp	/^    uint8_t   ss;$/;"	m	struct:TT	file:
stop	Client.cpp	/^    uint8_t   stop;$/;"	m	struct:SEGMENT	file:
stop	Decomp.cpp	/^    uint8_t   stop;$/;"	m	struct:SEGMENT	file:
store	Store.cpp	/^int  store(const  uint8_t *data, const uint16_t data_len)$/;"	f
tt	Client.cpp	/^    TT         tt;$/;"	m	struct:SEGMENT	file:
tt	Client.cpp	/^    TT         tt;$/;"	m	struct:SHAKE	file:
tt	Decomp.cpp	/^    TT         tt;$/;"	m	struct:SEGMENT	file:
tt	Decomp.cpp	/^    TT         tt;$/;"	m	struct:SHAKE	file:
type	Client.cpp	/^    uint16_t  type;$/;"	m	struct:SEGMENT	file:
type	Client.cpp	/^    uint8_t   type;$/;"	m	struct:SHAKE	file:
type	Decomp.cpp	/^    uint16_t  type;$/;"	m	struct:SEGMENT	file:
type	Decomp.cpp	/^    uint8_t   type;$/;"	m	struct:SHAKE	file:
webip	Conf.cpp	/^    string  webip;$/;"	m	struct:ST_CONF	file:
webport	Conf.cpp	/^    int  webport;$/;"	m	struct:ST_CONF	file:
write_position	ConsumerTask.cpp	/^	size_t write_position;$/;"	m	struct:ItemRepository	file:
year_h	Client.cpp	/^     uint8_t   year_h;$/;"	m	struct:TT	file:
year_h	Decomp.cpp	/^    uint8_t   year_h;$/;"	m	struct:TT	file:
year_l	Client.cpp	/^    uint8_t   year_l;$/;"	m	struct:TT	file:
year_l	Decomp.cpp	/^    uint8_t   year_l;$/;"	m	struct:TT	file:
